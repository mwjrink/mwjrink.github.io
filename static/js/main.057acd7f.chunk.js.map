{"version":3,"sources":["App.tsx","reportWebVitals.ts","index.tsx"],"names":["App","inputFlower","useRef","useState","selectedFlower","setSelectedFlower","showCamera","setShowCamera","showImage","setShowImage","showAPI","setShowAPI","selectedLeaves","response","setResponse","onIdentify","a","body","requestOptions","method","headers","fetch","json","data","console","log","className","onTakePhoto","dataUri","src","alt","type","id","ref","onChange","event","target","input","fReader","FileReader","files","readAsDataURL","onloadend","result","style","display","accept","onClick","current","click","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QA0IeA,MA7Hf,WACE,IAAMC,EAAcC,iBAAgC,MADvC,GAEOA,iBAAgC,MACRC,mBAAwB,OAHvD,mBAGNC,EAHM,KAGUC,EAHV,OAIuBF,oBAAkB,GAJzC,mBAING,EAJM,KAIMC,EAJN,OAKqBJ,oBAAkB,GALvC,mBAKNK,EALM,KAKKC,EALL,OAMiBN,oBAAkB,GANnC,mBAMNO,EANM,KAMGC,EANH,OAO+BR,mBAAwB,MAPvD,mBAONS,EAPM,aAQmBT,sBARnB,mBAQNU,EARM,KAQIC,EARJ,KAqCPC,EAAU,uCAAG,kCAAAC,EAAA,6DACjBL,GAAW,GAGLM,EAJW,2CAIgCb,EAJhC,2CAIiFQ,EAJjF,OAKXM,EAAiB,CACrBC,OAAQ,OACRC,QAAS,CACP,eAAgB,uBAElBH,QAVe,SAaMI,MAAM,2DAA4DH,GAbxE,cAaXL,EAbW,gBAcEA,EAASS,OAdX,OAcXC,EAdW,OAejBT,EAAYS,GAEZC,QAAQC,IAAIZ,GAjBK,4CAAH,qDAkDhB,OACE,qBAAKa,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,8BACE,gCACGpB,GACC,cAAC,IAAD,CAAQqB,YAvEI,SAACC,GAIvBrB,GAAc,GACdE,GAAa,GACbJ,EAAkBuB,MAoETpB,GACC,qBAAKqB,IAAG,OAAEzB,QAAF,IAAEA,IAAkB,GAAIsB,UAAU,WAAWI,IAAI,KAE3D,uBACA,gCACE,uBAAOC,KAAK,OAAOC,GAAG,OAAOC,IAAKhC,EAAaiC,SA5ChC,SAACC,GAC1B,GAAIA,GAASA,EAAMC,OAAQ,CACzB,IAAIC,EAAQF,EAAMC,OACdE,EAAU,IAAIC,WACdF,EAAMG,QACRF,EAAQG,cAAcJ,EAAMG,MAAM,IAClCF,EAAQI,UAAY,SAACP,GACfA,GAASA,EAAMC,QACjB/B,EAAkB8B,EAAMC,OAAOO,YAoCgDC,MAAO,CAAEC,QAAS,QAAUC,OAAO,YAChH,wBAAQC,QA5FG,WACjB9C,EAAY+C,UACd/C,EAAY+C,QAAQC,QACpBxC,GAAa,KAyFL,4BACA,wBAAQsC,QAtFE,WACpBxC,GAAc,GACdE,GAAa,IAoFH,kCAYN,wBAAQsC,QAAShC,EAAjB,sBACCL,GAAW,8BACTG,UCpHIqC,EAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCHdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.057acd7f.chunk.js","sourcesContent":["import React, { ChangeEvent, useEffect, useRef, useState } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\n\n// import React from 'react';\n// @ts-ignore\nimport Camera from 'react-html5-camera-photo';\nimport 'react-html5-camera-photo/build/css/index.css';\n\nconst api_key = '2b10189SmpQJ3XHmESgf2Hz9k'\n\nconst text = \"'score': 0.7177, 'scientificName': 'Turbinicarpus valdezianus '\"\n\nfunction App() {\n  const inputFlower = useRef<HTMLInputElement | null>(null);\n  const inputLeaves = useRef<HTMLInputElement | null>(null);\n  const [selectedFlower, setSelectedFlower] = useState<string | null>(null);\n  const [showCamera, setShowCamera] = useState<boolean>(false);\n  const [showImage, setShowImage] = useState<boolean>(false);\n  const [showAPI, setShowAPI] = useState<boolean>(false);\n  const [selectedLeaves, setSelectedLeaves] = useState<string | null>(null);\n  const [response, setResponse] = useState<string>();\n\n  const onUploadFlower = () => {\n    if (inputFlower.current) {\n      inputFlower.current.click();\n      setShowImage(true);\n    }\n  };\n\n  const onTakePicture = () => {\n    setShowCamera(true);\n    setShowImage(false);\n  };\n\n  const handleTakePhoto = (dataUri: any) => {\n    // Do stuff with the photo...\n    // console.log('takePhoto with uri: ', dataUri);\n\n    setShowCamera(false);\n    setShowImage(true);\n    setSelectedFlower(dataUri);\n  }\n\n  const onUploadLeaves = () => {\n    if (inputLeaves.current) {\n      inputLeaves.current.click();\n    }\n  };\n\n  const onIdentify = async () => {\n    setShowAPI(true);\n\n    // POST request using fetch with async / await\n    const body = `{ \"organs\": \"flower\", \"images\": \"${selectedFlower}\", \"organs\": \"leaf\", \"images\": \"${selectedLeaves}\" }`\n    const requestOptions = {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'multipart/form-data',\n      },\n      body\n    };\n    //https://my-api.plantnet.org/v2/identify/all?api-key=\n    const response = await fetch('https://localhost:3001?api-key=2b10189SmpQJ3XHmESgf2Hz9k', requestOptions);\n    const data = await response.json();\n    setResponse(data);\n\n    console.log(response)\n  };\n\n  const handleFlowerChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event && event.target) {\n      let input = event.target;\n      var fReader = new FileReader();\n      if (input.files) {\n        fReader.readAsDataURL(input.files[0]);\n        fReader.onloadend = (event) => {\n          if (event && event.target) {\n            setSelectedFlower(event.target.result as string);\n          }\n        }\n      }\n    }\n  }\n\n  const handleLeavesChange = (event: ChangeEvent<HTMLInputElement>) => {\n    if (event && event.target) {\n      let input = event.target;\n      var fReader = new FileReader();\n      if (input.files) {\n        fReader.readAsDataURL(input.files[0]);\n        fReader.onloadend = (event) => {\n          if (event && event.target) {\n            setSelectedLeaves(event.target.result as string);\n          }\n        }\n      }\n    }\n  }\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <div>\n            {showCamera &&\n              <Camera onTakePhoto={handleTakePhoto} />\n            }\n\n            {showImage &&\n              <img src={selectedFlower ?? \"\"} className=\"App-logo\" alt=\"\" />\n            }\n            <br />\n            <div>\n              <input type='file' id='file' ref={inputFlower} onChange={handleFlowerChange} style={{ display: 'none' }} accept=\"image/*\" />\n              <button onClick={onUploadFlower}>Upload Picture</button>\n              <button onClick={onTakePicture}>Take Picture</button>\n            </div>\n          </div>\n          {/* <div>\n            <img src={selectedLeaves ?? \"\"} className=\"App-logo\" alt=\"logo\" />\n            <br />\n            <div>\n              <input type='file' id='file' ref={inputLeaves} onChange={handleLeavesChange} style={{ display: 'none' }} accept=\"image/*\" />\n              <button onClick={onUploadLeaves}>Upload Leaves Image</button>\n            </div>\n          </div> */}\n        </div>\n        <button onClick={onIdentify}>Identify</button>\n        {showAPI && <div>\n          {response //text\n          }\n        </div>}\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}